#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

code_id: quantum_convolutional
physical: qubits
logical: qubits

name: 'Quantum convolutional code'
introduced: '\cite{arxiv:quant-ph/9712029,arxiv:quant-ph/9806032,arxiv:quant-ph/0304189,arxiv:quant-ph/0401134}'

description: |-
  One-dimensional translationally invariant qubit stabilizer code whose whose stabilizer group can be partitioned into constant-size subsets of constant support and of constant overlap between neighboring sets.
  Initially formulated as a quantum analogue of convolutional codes, which were designed to protect a continuous and never-ending stream of information.
  Precise formulations sometimes begin with a finite-dimensional lattice, with the intent to take the thermodynamic limit; logical dimension can be infinite as well.

  Quantum convolutional codes, like their classical counterparts, can also be understood in terms of frames. Let each encoding frame take in \(n\) qubits, carry \(m\) qubits of information between frames, and act on them with \(n-k\) Pauli generators. Each generator, countably infinite in length, must commute with each \(n\) register shift of itself, but need not commute with the other generators \cite{arxiv:quant-ph/0703182}. The \(m\) qubits of information carried between each frame are also stabilized by additional memory Pauli operators. It is known that the minimal value for \(m\) is given by \(\text{dim}(M)-\frac{1}{2}\text{rank}(M)\), with \(M\) being the matrix containing the required commutation relations of the memory qubits \cite{arxiv:1105.0649,arxiv:1011.5535,arxiv:0804.1404}. These operators can be efficiently determined \cite{arxiv:2206.13040}.

features:
  encoders:
    - 'Encoding is efficient and uses only \hyperref[topic:clifford]{Clifford gates}. Some encoders yield \textit{catastrophic} errors, i.e., errors that require a circuit of infinite depth to correct \cite[Def. 4.1]{arxiv:quant-ph/0401134}.'
    - 'Pearl-necklace encoding \cite{arxiv:quant-ph/0304189,arxiv:quant-ph/0401134,arxiv:quant-ph/0602129,arxiv:1004.5179}.'
    - 'Quantum shift register encoding \cite{arxiv:0903.3894}.'
    - 'Encoding circuits can be viewed as matrix-product-state tensor networks \cite{arxiv:1312.4578}.'
  decoders:
    - 'Quantum Viterbi decoder \cite{arxiv:quant-ph/9806032,arxiv:quant-ph/0304189,arxiv:quant-ph/0401134}.'
    - 'ML decoder \cite{arxiv:quant-ph/0304189}.'

notes:
  - 'See Refs. \cite{arxiv:quant-ph/0304189,arxiv:quant-ph/0511016,arxiv:quant-ph/0602129,arxiv:quant-ph/0703181} for explicit and simple examples.'
  - 'See Ref. \cite{doi:10.1017/CBO9781139034807.011} and the book \cite{preset:GottesmanBook} for an introduction to quantum convolutional codes.'


relations:
  parents:
    - code_id: qubit_stabilizer
    - code_id: translationally_invariant_stabilizer
      detail: |
        Quantum convolutional codes are lattice stabilizer codes on an semi-infinite or infinite lattice in one dimension \cite{arxiv:1305.6973}. Some notions may be extendable to non-stabilizer codes \cite[Sec. 4]{arxiv:quant-ph/0401134}.
        Any prime-qudit code can be converted using a constant-depth Clifford circuit to several copies of the 1D repetition code along with some trivial codes \cite{arxiv:1607.01387}.
    - code_id: quantum_lego
      detail: 'Quantum convolutional encoding circuits can be viewed as matrix-product-state tensor networks \cite{arxiv:1312.4578}.'
    - code_id: generalized_reed_solomon
      detail: 'GRS codes can be used to construct quantum convolutional codes \cite{arxiv:0812.5104}.'
    - code_id: generalized_reed_muller
      detail: 'GRM codes can be used to construct quantum convolutional codes \cite{arxiv:quant-ph/0604102,arxiv:0812.5104,doi:10.1201/9781584889007-18}.'


# Begin Entry Meta Information
_meta:
  # Change log - most recent first
  changelog:
    - user_id: VictorVAlbert
      date: '2023-01-04'
    - user_id: LaneGGunderman
      date: '2023-01-04'
