#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

# Use UTF-8 unicode encoding
# AMS-TeX commands are rendered inside \( ... \) using MathJaX.
# Allowed external bibliographic references are
#    \cite{arXiv:#.#} or \cite{arXiv:quant-ph/#},
#    \cite{doi:#}, or, as a last resort
#    \cite{manual:{(enter citation line incl. author and year here)}}
# External websites such as code tables, coding theory packages, github pages linked as
#    \url{https://example.com/example}
#    \href{https://example.com/example}{link text}
# Internal references to codes are
#    \hyperref[code:code_id]{link text}
# Delete instructional comments when submitting

# code id, physical, logical are all lower case
code_id: expander
physical: bits
logical: bits

# Apostrophes are denoted by two apostrophe characters, i.e., ''
# Code title is singular
name: 'Expander code'

# First reference with the code (optional).
introduced: '\cite{doi:10.1109/18.556667}'

# Anything applicable to a larger parent set of codes (see below) should go in
# that entry instead of here.
description: 'Expander codes are binary linear codes whose parity check matrices are derived from the adjacency matrix of bipartite expander graphs. In particular, the rows of the parity check matrix correspond to the right nodes of the bipartite graph and the columns correspond to the left nodes. The codespace is equivalent to all subsets of the left nodes in the graph that have an even number of edges going into every right node of the graph. Since the expander graph is only left regular, these codes do not qualify as LDPC codes. Expander codes are important because they admit efficient encoding and decoding algorithms and have the desirable property that their rate and relative distance are constant. The rate and distance of the expander code depend on specific parameters of the corresponding graph. A (\(n, m, D, \gamma, \alpha\)) bipartite expander graph is defined as a \(D\)-left-regular graph with \(n\) left nodes, and \(m\) right nodes such that for any subset of left nodes \(S\) of size at most \(\gamma n\) the neighborhood \(N(S)\) is at least of size \(\alpha|S|\). Given a (\(n, m, D, \gamma, (1-\epsilon)D\)) expander graph, the corresponding expander code has rate of \(1 - m/n\) and a distance of at least \(2(1-\epsilon)\gamma n\) for any \(\epsilon < 1/2\). Explicit constructions for expander graphs with any ratio \(n/m\) are known where \(D = \text{polylog}(n/m)\), \(gamma = \Omega(1/D)\) and arbitrary \(\epsilon\) \cite{doi:10.1145/509907.510003}.'

protection: 'Bit flip errors of weight at most \((d-1)/2\) where \(d\) is the distance of the code and is linear in \(n\), the number of physical bits.'

# This field starts a list of specific labeled subfields; do not leave it
# empty. If empty, comment out. Also, indentations are important!
features:

  # The fields below relate to specific properties of the code that are worth
  # noting. In some cases (see below), there might be multiple pieces of
  # information associated with a field (e.g., mutliple encoders/decoders,
  # multiple facts about fault tolerance, etc.); in such cases, the field
  # accepts a list of text entries, with one item per piece of information.
  #
  # Any fields below should be omitted if they do not apply.

  rate: 'The rate is \(1 - m/n\) where \(n\) is the number of left nodes and \(m\) is the number of right nodes in the bipartite expander graph.'

  # This field that starts a list of strings, indexed by a dash; do not leave it
  # empty. If empty, comment out.
  encoders:
    - 'Multiplication by generator matrix with runtime \(O(n^2)\)'

  # transversal_gates: 'Transversal ... gates \cite{doi:ok-paper}. Comment out if doesn''t apply.'
  #
  # general_gates:
  #   - 'Universal gate set achieved by either additional ... gate.'
  #   - 'Magic-state distillation protocols'
  #   - 'kth Clifford hierarchy gates obtained by ... circuits'

  decoders:
    - 'Decoding can be done in \(O(n)\) runtime using a greedy algorithm. The algorithm consists of flipping a bit of the received word if it will result in a greater number of satisfied parity checks. This is repeated until a codeword is reached.'

  # fault_tolerance:
  #   - 'Transversal gates are fault-tolerant w.r.t. ... noise \cite{doi:ok-paper}'
  #   - 'Other fault-tolerant gadgets (measurements, encoders, error correcting steps)'
  #   - 'Noise-model-preserving gadgets, noise-biased gates, fault-tolerant flag error correction'
  #   - 'Pieceable fault tolerance.'
  #
  # threshold:
  #   - '2\% error-correction threshold  ... with perfect ... decoder \cite{arxiv:another-paper}.'
  #   - '0.3\% error-correction threshold ... with noisy MWPM decoder \cite{doi:good-paper}.'
  #   - '\(10^{-5}\) computational threshold using concatenated scheme under ... noise with overhead of ... '
  #   - 'Asymptotic lower bound of ... on threshold with ... noise with ... overhead.'
  #   - 'Thresholds using magic-state distillation protocols assuming perfect Clifford gates.'

  # Propose a field that you feel is applicable to a large and interesting class of codes
  #some_other_field:
  # - 'detail'
#
# realizations:
#   # List and explain the different "domains" of realizations in list items.
#   # Group closely related realizations into a single item. It's OK to have a
#   # single list item. Each item should more or less correspond to what would be
#   # said in a paragraph.
#   - 'Code used in DVDs \cite{doi:####...}, 5G, etc.'
#   - 'Realized in trapped-ion quantum devices \cite{arXiv:####.#####}, etc.'
#
# notes:
#   - 'Bounds on n,k, or d for this class.'
#   - 'Links to code tables, github, GAP algebra packages, more papers \cite{arXiv:####.#####}.'
#   - 'Connections to physics; based on \(H^4(\mathcal{BG},\mathbb{Z})\)'
#   - 'Can reference other codes, but try to put such connections in the relations fields.'
#   - 'Anything noteworthy that''s not above or below.'

relations:
  parents:
    - code_id: binary_linear
      #detail: 'code_id1 is smallest code family that includes this code that maintains the same physical space structure'
    # - code_id: tanner
    #   detail: 'Expander codes are a special case of Tanner codes where the edge constraints are parity checks.'
    # - code_id: code_id3
    #   detail: 'code_id3 is code family described by a property shared by this code other than physical space (e.g., topological)'

  # cousins:
    # - code_id: distance_amplification
    #   detail: 'Distance amplification codes can also be defined as a special case of Tanner codes.'
  #   - code_id: code_id5
  #     detail: 'code_id5 are codes from other families that could also be constructed this way. This entry goes into the code family that is ''smaller''.'
  #   - code_id: code_id6
  #     detail: 'code_id6 are used in the construction of this code'
