#######################################################
## This is a code entry in the error correction zoo. ##
##       https://github.com/errorcorrectionzoo       ##
#######################################################

code_id: repetition
physical: bits
logical: bits

name: 'Repetition code'

description: |
  \([n,1,n]\) binary linear code encoding one bit of information into an \(n\)-bit string.
  The length \(n\) needs to be an odd number, since the receiver will pick the majority to recover the information.
  The idea is to increase the code distance by repeating the logical information several times. It is a \((n,1)\)-Hamming code.
  Its automorphism group is \(S_n\).

protection: 'Detects errors on up to \(\frac{n-1}{2}\) coordinates, corrects erasure errors on up to \(\frac{n-1}{2}\) coordinates. The generator matrix is \(G=\left[\begin{smallmatrix}1 & 1&\cdots& 1 & 1 \end{smallmatrix}\right]\).'

features:
  rate: 'Code rate is \(\frac{1}{n}\), code distance is \(n\).'

  decoders:
    - 'Calculate the Hamming weight \(d_H\) of the code. If \(d_H\leq \frac{n-1}{2}\), decode the code as 0. If \(d_H\geq \frac{n+1}{2}\), decode the code as 1.'
    - 'Automaton-like decoders for the repetition code on a 2D lattice, otherwise known as the classical 2D Ising model, were developed by Toom \cite{manual:{A. L. Toom, “Nonergodic Multidimensional System of Automata”, Probl. Peredachi Inf., 10:3 (1974), 70–79; Problems Inform. Transmission, 10:3 (1974), 239–246},doi:10.1007/978-1-4612-2168-5_18}. An automaton by Gacs \cite{arxiv:math/0003117,doi:10.1023/A:1004823720305} and Tsirelson \cite{doi:10.1007/BFb0070081} yield local decoders for a 1D lattice.'

  threshold:
    - 'Suppose each bit has probability \(p\) of being received correctly, independent for each bit. The probability that a repetition code is received correctly is \(\sum_{k=0}^{(n-1)/2}\frac{n!}{k!(n-k)!}p^{n-k}(1-p)^{k}\). If \(\frac{1}{2}\leq p\), then one can always increase the probability of success by increasing the number of physical bits \(n\); see section 2.2.1 Ref. \cite{arxiv:2111.08894} for a pedagogical explanation.'
    - 'The first threshold theorem for classical circuits was proven by von Neumann \cite{doi:10.1515/9781400882618-003}, which spurred the study of noisy classical circuits \cite{doi:10.1109/SFCS.1985.41,doi:10.1109/18.2628,doi:10.1214/aop/1022855749,doi:10.1214/aoms/1177699266}.'

  fault_tolerance:
    - 'Triple modular redundancy (TMR) error-correction protocol \cite{doi:10.1147/rd.62.0200} for fault-tolerant memory operations and classical gate operations; see section 2.6 and 2.7 Ref. \cite{arxiv:2111.08894} for a pedagogical explanation.'

realizations:
  - 'Repetition codes, in conjunction with other codes, were used in magnetic disks \cite{doi:10.1109/TCOM.1984.1096094}.'
  - Communication protocols such as FlexRay \cite{doi:10.1016/C2012-0-07058-5}.'
#  - 'Although classical repetition code does not have many real-world applications, it still inspire the studies of quantum error correction. Quantum repetition code is widely studied in quantum computing community.'

relations:
  parents:
    - code_id: binary_cyclic
      detail: 'The repetition code is cyclic with generator polynomial \(1+x+\cdots+x^{n-1}\).'
    - code_id: nearly_perfect
    - code_id: reed_muller
      detail: 'RM\((0,m)\) are repetition codes.'
  cousins:
    - code_id: simplex
      detail: 'The simplex code for \(m=2\) reduces to a four-bit repetition code.'
    - code_id: perfect_binary
      detail: 'Repetition codes are perfect for odd \(n\).'
    - code_id: quantum_repetition
      detail: 'A quantum repetition code can be thought of as a classical \([n,1,d]\) repetition code with classical distance \(d=\left\lfloor (n-1)/2\right\rfloor\) embedded in a quantum system.'
    - code_id: hamming
      detail: 'The triple repetition code \([3,1,3]\) is the smallest Hamming code.'


# Begin Entry Meta Information
_meta:
  # Change log - most recent first
  changelog:
    - user_id: Baobach
      date: '2023-02-22'
    - user_id: VictorVAlbert
      date: '2022-09-28'
    - user_id: VictorVAlbert
      date: '2022-05-27'
    - user_id: VictorVAlbert
      date: '2021-12-15'
    - user_id: YijiaXu
      date: '2021-12-14'
